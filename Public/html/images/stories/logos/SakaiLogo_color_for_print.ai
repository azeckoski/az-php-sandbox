%!PS-Adobe-3.1 EPSF-3.0%%Title: sakai_color_print.eps%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: Jeff  Chen%%CreationDate: 2/19/04%%CropBox: 0.000000 0.000000 128.753906 77.614746%%BoundingBox: 0 0 129 78 %%HiResBoundingBox: 0.000000 0.000000 128.753906 77.614746%%LanguageLevel: 2 %%DocumentData: Clean7Bit%%Pages: 1 %%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Core 2.0 0%%DocumentFonts: %%DocumentSuppliedFonts: %%PageOrder: Ascend%%DocumentProcessColors:  Black%%DocumentCustomColors: (PANTONE 298 CVU) %%CMYKCustomColor: 0.776471 0.0941176 0.0470588 0.00392157 (PANTONE 298 CVU) %%RGBCustomColor: %%EndComments%%BeginDefaults%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 233 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_dst64 64 string def/AGMCORE_srcLen nd/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_imagestring0 nd/AGMCORE_imagestring1 nd/AGMCORE_imagestring2 nd/AGMCORE_imagestring3 nd/AGMCORE_imagestring4 nd/AGMCORE_imagestring5 nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_mbuf () def/AGMCORE_ybuf () def/AGMCORE_kbuf () def/AGMCORE_gbuf () def/AGMCORE_bbuf () def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_arg1 nd/AGMCORE_arg2 nd/AGMCORE_&setgray nd/AGMCORE_&image nd/AGMCORE_&colorimage nd/AGMCORE_&imagemask nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&&setcolorspace nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_in_rip_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ccimage_exists nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_ndx nd/AGMCORE_err_strings nd/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/bdf{	bind def} bind def/xdf{	exch def} def/ldf {	load def} def/ddf{	put} def	/xddf{	3 -1 roll put} def	/xpt{	exch put} def	/bdict	{		mark	} def		/edict	{		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end	}def	/ps_level	/languagelevel where{		pop languagelevel	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/ndf{	1 index where{		pop pop pop	}{		dup xcheck		{bind}if		def	}ifelse} def/skip_image{	has_color ne{		dup 256 idiv		{currentfile AGMCORE_str256 readstring pop pop}repeat		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval		readstring pop pop	}{		pop	}ifelse} def/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx} def/colorbuf{	0 1 2 index length 1 sub		{		dup 2 index exch get 		255 exch sub 		2 index 		3 1 roll 		put		} for} def/makereadonlyarray{	/packedarray where		{pop packedarray}		{array astore readonly}	ifelse} def/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq 	{		dup /HalftoneType get 1 eq			{			/SpotFunction get			}			{			dup /HalftoneType get 2 eq				{				/GraySpotFunction get				}				{				pop				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}				{dup mul exch dup mul add 1 exch sub}ifelse}bind				}			ifelse			}		ifelse	}	if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	userdict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				/AGMCORE_arg2 xdf	/AGMCORE_arg1 xdf		clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			dup (.) ne AGMCORE_arg1 0 lt and				{				pop				}				{				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt					{					currentpoint AGMCORE_deltaY sub exch pop					clippath pathbbox pop pop pop 44 add exch moveto					} if				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show				} ifelse						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{			dup 94 eq 				{				pop				AGMCORE_arg1 0 ge					{					AGMCORE_arg1 AGMCORE_str256 cvs					dup /AGMCORE_tmp exch length def					AGMCORE_str256 exch 0 exch putinterval					AGMCORE_str256 0 AGMCORE_tmp getinterval					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt						{						currentpoint AGMCORE_deltaY sub exch pop						clippath pathbbox pop pop pop 44 add exch moveto						} if					AGMCORE_str256 0 AGMCORE_tmp getinterval show					}					{					/AGMCORE_arg1 0 def					} ifelse				0 1 AGMCORE_str256 length 1 sub					{					AGMCORE_str256 exch 0 put					}for				/AGMCORE_tmp 0 def				AGMCORE_arg1 0 ne					{					/AGMCORE_arg1 AGMCORE_arg2 def					} if				}				{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def				}ifelse			} ifelse		} forall} bdflevel2{	/AGMCORE_map_reserved_ink_name	{		dup type /stringtype eq{			dup /Red eq{				pop (_Red_)			}{				dup /Green eq{					pop (_Green_)				}{					dup /Blue eq{						pop (_Blue_)					}{						dup /Cyan eq{							pop (_Cyan_)						}{							dup /Magenta eq{								pop (_Magenta_)							}{								dup /Yellow eq{									pop (_Yellow_)								}{									dup /Black eq{										pop (_Black_)									}{										dup / eq{											pop (Process)										}if									}ifelse								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}if	}def}if/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not		{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror			{			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and {				$error /newerror false put				AGMCORE_cur_err /AGMCORE_bad_environ eq					{					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version					}					{					AGMCORE_cur_err 0 0					} ifelse				compose_error_msg				} if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def		/AGMCORE_&&setcolorspace /setcolorspace ldf	}if	/AGMCORE_&image systemdict/image get def	/AGMCORE_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMCORE_&colorimage /colorimage ldf	}if	/AGMCORE_in_rip_sep		level2{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_gstate_known{		where{			/Adobe_AGM_Core_Id known		}{			false		}ifelse	}ndf	/AGMCORE_GSTATE AGMCORE_gstate_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 7 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	end}def/page_setup{	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or		}ifelse	def		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots	}ifelse	{		/setcmykcolor[			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx			/setcmykcolor load dup type/operatortype ne{/exec cvx}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/ln /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		/invert_image_samples		{			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def		/get_gstate		{			AGMCORE_GSTATE begin			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def			/AGMCORE_GSTATE_clr_spc currentcolorspace def			/AGMCORE_GSTATE_clr_indx 0 def			/AGMCORE_GSTATE_clr_comps 12 array def			mark currentcolor counttomark				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop			/AGMCORE_GSTATE_fnt rootfont def			/AGMCORE_GSTATE_lw currentlinewidth def			/AGMCORE_GSTATE_lc currentlinecap def			/AGMCORE_GSTATE_lj currentlinejoin def			/AGMCORE_GSTATE_ml currentmiterlimit def			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf			/AGMCORE_GSTATE_sa currentstrokeadjust def						/AGMCORE_GSTATE_clr_rnd currentcolorrendering def			/AGMCORE_GSTATE_op currentoverprint def			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def			currentcolortransfer 				cvlit /AGMCORE_GSTATE_gy_xfer xdf 				cvlit /AGMCORE_GSTATE_b_xfer xdf				cvlit /AGMCORE_GSTATE_g_xfer xdf 				cvlit /AGMCORE_GSTATE_r_xfer xdf			/AGMCORE_GSTATE_ht currenthalftone def			/AGMCORE_GSTATE_flt currentflat def			end		}ndf				/set_gstate		{			AGMCORE_GSTATE begin			AGMCORE_GSTATE_ctm setmatrix			AGMCORE_GSTATE_clr_spc setcolorspace			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor			AGMCORE_GSTATE_fnt setfont			AGMCORE_GSTATE_lw setlinewidth			AGMCORE_GSTATE_lc setlinecap			AGMCORE_GSTATE_lj setlinejoin			AGMCORE_GSTATE_ml setmiterlimit			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash			AGMCORE_GSTATE_sa setstrokeadjust						AGMCORE_GSTATE_clr_rnd setcolorrendering			AGMCORE_GSTATE_op setoverprint			AGMCORE_GSTATE_bg cvx setblackgeneration			AGMCORE_GSTATE_ucr cvx setundercolorremoval			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or				{				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne					{					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark					} if				}{				AGMCORE_GSTATE_ht sethalftone				} ifelse			AGMCORE_GSTATE_flt setflat			end		}ndf		AGMCORE_producing_seps not{				/setcolorspace where{				/Adobe_AGM_Core_Id known not			}{				true			}ifelse			{				/setcolorspace				{					dup type dup /arraytype eq exch /packedarraytype eq or{						dup 0 get dup /Separation eq{							pop							[ exch {} forall ]							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put						}{							/DeviceN eq {								[ exch {} forall ]								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put							}if						}ifelse					}if					AGMCORE_&&setcolorspace 				}def			}if		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/ln{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/op /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/Adobe_AGM_Core 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	Adobe_AGM_Core/AGMCORE_name xddf	false	currentpagedevice/SeparationColorNames get{		AGMCORE_name eq or	}forall}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	1 setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMCORE_&imagemask			}{				AGMCORE_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMCORE_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMCORE_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/rdline {	currentfile AGMCORE_str256 readline pop} def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMCORE_src256 readstring pop		dup length /AGMCORE_srcLen exch def		/AGMCORE_ndx 0 def				AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{			1 index exch get			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put			/AGMCORE_ndx AGMCORE_ndx 1 add def		}for		pop		AGMCORE_dst64 0 AGMCORE_ndx getinterval	}	bind	/exec cvx	] cvx} def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{	 						currentoverprint not{			 					1 AGMCORE_&setgray	 							knockout_image_samples			 					currentdict imageormask_sys			 				}{			 					nulldevice currentdict imageormask_sys			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										nulldevice									}{										invert_image_samples									}ifelse								}{		 							currentoverprint not{		 								knockout_image_samples				 					}{				 						nulldevice				 					}ifelse					 			}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{																	currentcolortransfer								{pop 1} exch addprocs 4 1 roll												{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								setcolortransfer																	MultipleDataSources NComponents AGMCORE_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{		 								currentoverprint not{		 									knockout_image_samples				 						}{				 							nulldevice				 						}ifelse					 				}if								}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/tint_image_to_color{	begin		Width Height BitsPerComponent ImageMatrix 		/DataSource load	end	Adobe_AGM_Core begin		/AGMCORE_mbuf 0 string def		/AGMCORE_ybuf 0 string def		/AGMCORE_kbuf 0 string def		{			colorbuf dup length AGMCORE_mbuf length ne				{				dup length dup dup				/AGMCORE_mbuf exch string def				/AGMCORE_ybuf exch string def				/AGMCORE_kbuf exch string def				} if			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop		}		addprocs		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage		end} def			/sep_imageormask_lev1{	begin		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{				255 mul round cvi GrayLookup exch get			} currenttransfer addprocs settransfer			currentdict imageormask		}{			/sep_colorspace_dict AGMCORE_gget/Components known{				MappedCSA 0 get /DeviceCMYK eq{					Components aload pop				}{					0 0 0 Components aload pop 1 exch sub				}ifelse								Adobe_AGM_Core/AGMCORE_k xddf 				Adobe_AGM_Core/AGMCORE_y xddf 				Adobe_AGM_Core/AGMCORE_m xddf 				Adobe_AGM_Core/AGMCORE_c xddf 									AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer					currentdict imageormask				}{ 										currentcolortransfer					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll					setcolortransfer					currentdict tint_image_to_color				}ifelse			}{								MappedCSA 0 get /DeviceGray eq {					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer					currentdict imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}ifelse				}ifelse			}ifelse		}ifelse	end}def/sep_image_lev1_sep{	begin		/sep_colorspace_dict AGMCORE_gget/Components known{			Components aload pop						Adobe_AGM_Core/AGMCORE_k xddf 			Adobe_AGM_Core/AGMCORE_y xddf 			Adobe_AGM_Core/AGMCORE_m xddf 			Adobe_AGM_Core/AGMCORE_c xddf 							{AGMCORE_c mul 1 exch sub}			{AGMCORE_m mul 1 exch sub}			{AGMCORE_y mul 1 exch sub}			{AGMCORE_k mul 1 exch sub}		}{ 			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}		}ifelse				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMCORE_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or{ 								knockout_image_samples		 					}{		 						nulldevice 		 					}ifelse							currentdict imageormask_sys 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/read_image_file{	AGMCORE_imagefile 0 setfileposition	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put	exch	load exec}def/write_image_file{	{ (AGMCORE_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Core/AGMCORE_imagefile xddf 		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMCORE_imbuf readstring pop			}{				exec			} ifelse			AGMCORE_imagefile exch writestring		}for		true	}ifelse}def/imageormask_l2_overprint{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile	}{		currentdict imageormask	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				nulldevice currentdict imageormask_sys		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_imageormask_lev1{	/indexed_colorspace_dict AGMCORE_gget begin	begin		currentdict		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer			imageormask		}{						MappedCSA 0 get /DeviceGray eq {				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceCMYK eq {					currentcolortransfer					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}{ 					currentcolortransfer					{pop 1} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}ifelse			}ifelse		}ifelse	end end}def/indexed_image_lev1_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMCORE_&imagemask		}{			AGMCORE_&image		}ifelse				end end}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false op [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/MultipleDataSources false def			/NComponents 1 def			/ImageType 1 def			/Decode [0 1 def]			/SkipImageProc {false} def			currentdict		end	}if	dup begin		/HostSepColorImage false def		currentdict/Decode known not{			/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse			] 			def		}if		currentdict/Operator known not{			/Operator /image def		}if	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cpaint_gcomp{	AGM_preserve_spots{		gsave		nulldevice	}if}def/cpaint_gsep{	AGM_preserve_spots{		grestore		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 	}{			gsave		nulldevice	}ifelse}def/cpaint_gend{	AGM_preserve_spots{		Adobe_AGM_Core/AGMCORE_ovp get setoverprint	}{		grestore	}ifelse	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%EndProlog%%BeginSetupAdobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at leastPostScript Level ^\tand at least PostScript version ^. Ensure that the PPD is correct or thatthe PostScript  level requested is supported by this printer. ) def/AGMCORE_color_space_onhost_seps (This job has content that will not separatewith on-host methods. ) def/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend put2 2010 true Adobe_AGM_Core/doc_setup get exec%%EndSetup%%Page: name:1 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Core/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddfmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez1 -1 scale 0 -77.6147 translategsave[1 0 0 1 0 0 ] concatgsave0 0 mo0 77.6147 ln128.754 77.6147 ln128.754 0 lnclp95.9961 57.8442 mo103.414 59.3569 107.95 61.2148 107.95 62.8179 cv107.95 66.2017 87.7334 70.9829 62.7969 70.9829 cv37.8584 70.9829 17.6396 66.2017 17.6396 62.8179 cv17.6396 61.3022 21.6997 59.5591 28.4126 58.0947 cv13.5576 59.6729 3.89551 62.2271 3.89551 65.1128 cv3.89551 69.9077 30.5605 77.6147 63.4492 77.6147 cv96.3389 77.6147 123.003 69.9077 123.003 65.1128 cv123.003 62.0688 112.253 59.3936 95.9961 57.8442 cvfalse op/0 <</Name (PANTONE 298 CVU) /CSA /1 /TintMethod /Additive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0.00392157 0 0 0 ][ 0.00392157 0.00392157 0.00392157 0 ] [ 0.00784314 0.00392157 0.00392157 0 ][ 0.0117647 0.00392157 0.00392157 0 ] [ 0.0117647 0.00392157 0.00392157 0 ][ 0.0156863 0.00784314 0.00392157 0 ] [ 0.0156863 0.00784314 0.00392157 0 ][ 0.0196078 0.00784314 0.00784314 0 ] [ 0.0235294 0.00784314 0.00784314 0 ][ 0.027451 0.00784314 0.00784314 0 ] [ 0.027451 0.0117647 0.00784314 0 ][ 0.0313726 0.0117647 0.00784314 0 ] [ 0.0352941 0.0156863 0.0117647 0 ][ 0.0392157 0.0156863 0.0117647 0 ] [ 0.0392157 0.0156863 0.0117647 0 ][ 0.0392157 0.0156863 0.0117647 0 ] [ 0.0431373 0.0156863 0.0117647 0 ][ 0.0509804 0.0156863 0.0156863 0 ] [ 0.0470588 0.0196078 0.0156863 0 ][ 0.0509804 0.0196078 0.0156863 0 ] [ 0.054902 0.0196078 0.0156863 0 ][ 0.0588235 0.0196078 0.0156863 0 ] [ 0.0588235 0.0196078 0.0196078 0 ][ 0.0627451 0.0196078 0.0196078 0 ] [ 0.0666667 0.0235294 0.0196078 0 ][ 0.0705882 0.0235294 0.0196078 0 ] [ 0.0705882 0.0235294 0.0196078 0 ][ 0.0745098 0.0235294 0.0196078 0 ] [ 0.0784314 0.0235294 0.0235294 0 ][ 0.0823529 0.0235294 0.0235294 0 ] [ 0.0823529 0.027451 0.0235294 0 ][ 0.0862745 0.027451 0.0235294 0 ] [ 0.0901961 0.027451 0.0235294 0 ][ 0.0941176 0.027451 0.0235294 0 ] [ 0.0941176 0.027451 0.0235294 0 ][ 0.0980392 0.0313726 0.027451 0 ] [ 0.101961 0.0313726 0.027451 0 ][ 0.105882 0.0313726 0.027451 0 ] [ 0.105882 0.0313726 0.027451 0 ][ 0.109804 0.0313726 0.027451 0 ] [ 0.113725 0.0313726 0.027451 0 ][ 0.117647 0.0313726 0.027451 0 ] [ 0.117647 0.0313726 0.0313726 0 ][ 0.121569 0.0313726 0.0313726 0 ] [ 0.12549 0.0352941 0.0313726 0 ][ 0.129412 0.0352941 0.0313726 0 ] [ 0.129412 0.0352941 0.0313726 0 ][ 0.133333 0.0352941 0.0352941 0 ] [ 0.137255 0.0352941 0.0352941 0 ][ 0.141176 0.0352941 0.0352941 0 ] [ 0.141176 0.0352941 0.0352941 0 ][ 0.145098 0.0352941 0.0352941 0 ] [ 0.14902 0.0352941 0.0352941 0 ][ 0.152941 0.0352941 0.0352941 0 ] [ 0.152941 0.0352941 0.0352941 0 ][ 0.156863 0.0392157 0.0352941 0 ] [ 0.160784 0.0392157 0.0352941 0 ][ 0.164706 0.0352941 0.0392157 0 ] [ 0.164706 0.0392157 0.0392157 0 ][ 0.168627 0.0392157 0.0392157 0 ] [ 0.172549 0.0392157 0.0392157 0 ][ 0.176471 0.0392157 0.0392157 0 ] [ 0.176471 0.0392157 0.0392157 0 ][ 0.180392 0.0392157 0.0392157 0 ] [ 0.184314 0.0392157 0.0392157 0 ][ 0.188235 0.0392157 0.0392157 0 ] [ 0.188235 0.0392157 0.0392157 0 ][ 0.196078 0.0431373 0.0392157 0 ] [ 0.2 0.0392157 0.0392157 0 ][ 0.203922 0.0392157 0.0392157 0 ] [ 0.203922 0.0431373 0.0392157 0 ][ 0.207843 0.0392157 0.0392157 0 ] [ 0.211765 0.0392157 0.0431373 0 ][ 0.215686 0.0431373 0.0431373 0 ] [ 0.215686 0.0431373 0.0431373 0 ][ 0.219608 0.0431373 0.0392157 0 ] [ 0.223529 0.0431373 0.0392157 0 ][ 0.227451 0.0392157 0.0431373 0 ] [ 0.227451 0.0431373 0.0431373 0 ][ 0.231373 0.0431373 0.0431373 0 ] [ 0.235294 0.0431373 0.0431373 0 ][ 0.239216 0.0431373 0.0392157 0 ] [ 0.239216 0.0431373 0.0431373 0 ][ 0.243137 0.0431373 0.0431373 0 ] [ 0.247059 0.0431373 0.0431373 0 ][ 0.25098 0.0431373 0.0431373 0 ] [ 0.254902 0.0392157 0.0392157 0 ][ 0.258824 0.0431373 0.0431373 0 ] [ 0.262745 0.0431373 0.0431373 0 ][ 0.266667 0.0392157 0.0431373 0 ] [ 0.270588 0.0431373 0.0392157 0 ][ 0.270588 0.0431373 0.0392157 0 ] [ 0.27451 0.0392157 0.0431373 0 ][ 0.278431 0.0431373 0.0392157 0 ] [ 0.282353 0.0392157 0.0392157 0 ][ 0.282353 0.0431373 0.0392157 0 ] [ 0.286275 0.0431373 0.0392157 0 ][ 0.290196 0.0392157 0.0431373 0 ] [ 0.298039 0.0431373 0.0392157 0 ][ 0.298039 0.0431373 0.0392157 0 ] [ 0.301961 0.0392157 0.0392157 0 ][ 0.305882 0.0431373 0.0392157 0 ] [ 0.309804 0.0392157 0.0392157 0 ][ 0.309804 0.0392157 0.0392157 0 ] [ 0.313726 0.0431373 0.0392157 0 ][ 0.317647 0.0431373 0.0392157 0 ] [ 0.321569 0.0392157 0.0392157 0 ][ 0.321569 0.0431373 0.0392157 0 ] [ 0.32549 0.0431373 0.0392157 0 ][ 0.329412 0.0392157 0.0392157 0 ] [ 0.333333 0.0431373 0.0352941 0 ][ 0.333333 0.0431373 0.0352941 0 ] [ 0.337255 0.0431373 0.0392157 0 ][ 0.341176 0.0431373 0.0352941 0 ] [ 0.345098 0.0431373 0.0352941 0 ][ 0.345098 0.0431373 0.0352941 0 ] [ 0.34902 0.0470588 0.0313726 0 ][ 0.352941 0.0431373 0.0352941 0 ] [ 0.356863 0.0470588 0.0313726 0 ][ 0.356863 0.0470588 0.0313726 0 ] [ 0.360784 0.0470588 0.0313726 0 ][ 0.364706 0.0470588 0.0313726 0 ] [ 0.368627 0.0470588 0.0313726 0 ][ 0.368627 0.0470588 0.0313726 0 ] [ 0.372549 0.0470588 0.027451 0 ][ 0.376471 0.0470588 0.027451 0 ] [ 0.380392 0.0470588 0.027451 0 ][ 0.380392 0.0470588 0.027451 0 ] [ 0.384314 0.0470588 0.027451 0 ][ 0.388235 0.0470588 0.027451 0 ] [ 0.392157 0.0470588 0.0235294 0 ][ 0.392157 0.0470588 0.0235294 0 ] [ 0.396078 0.0470588 0.027451 0 ][ 0.4 0.0470588 0.0235294 0 ] [ 0.403922 0.0470588 0.0235294 0 ][ 0.403922 0.0470588 0.0235294 0 ] [ 0.407843 0.0509804 0.0196078 0 ][ 0.411765 0.0470588 0.0235294 0 ] [ 0.415686 0.0509804 0.0196078 0 ][ 0.415686 0.0509804 0.0196078 0 ] [ 0.419608 0.0470588 0.0196078 0 ][ 0.423529 0.0509804 0.0156863 0 ] [ 0.427451 0.0470588 0.0196078 0 ][ 0.427451 0.0470588 0.0196078 0 ] [ 0.431373 0.0509804 0.0156863 0 ][ 0.435294 0.0470588 0.0117647 0 ] [ 0.439216 0.0470588 0.0117647 0 ][ 0.439216 0.0509804 0.0117647 0 ] [ 0.443137 0.0470588 0.0117647 0 ][ 0.447059 0.0470588 0.0117647 0 ] [ 0.45098 0.0470588 0.00784314 0 ][ 0.45098 0.0470588 0.00784314 0 ] [ 0.454902 0.0470588 0.0117647 0 ][ 0.458824 0.0509804 0.00784314 0 ] [ 0.462745 0.0470588 0.00784314 0 ][ 0.462745 0.0470588 0.00784314 0 ] [ 0.466667 0.0509804 0.00392157 0 ][ 0.470588 0.0509804 0.00784314 0 ] [ 0.47451 0.0470588 0.00784314 0 ][ 0.47451 0.0509804 0.00784314 0 ] [ 0.478431 0.0509804 0.00784314 0 ][ 0.482353 0.054902 0.00784314 0 ] [ 0.486275 0.0509804 0.00784314 0 ][ 0.486275 0.0509804 0.00784314 0 ] [ 0.490196 0.054902 0.0117647 0 ][ 0.494118 0.054902 0.0117647 0 ] [ 0.498039 0.0509804 0.0117647 0 ][ 0.498039 0.054902 0.0156863 0 ] [ 0.501961 0.054902 0.0156863 0 ][ 0.505882 0.054902 0.0156863 0 ] [ 0.509804 0.054902 0.0156863 0 ][ 0.509804 0.054902 0.0156863 0 ] [ 0.513726 0.054902 0.0196078 0 ][ 0.517647 0.0588235 0.0196078 0 ] [ 0.521569 0.054902 0.0196078 0 ][ 0.52549 0.054902 0.0196078 0 ] [ 0.52549 0.0588235 0.0196078 0 ][ 0.529412 0.0588235 0.0235294 0 ] [ 0.533333 0.0588235 0.0235294 0 ][ 0.537255 0.0588235 0.0235294 0 ] [ 0.537255 0.0588235 0.0235294 0 ][ 0.541176 0.0627451 0.0235294 0 ] [ 0.54902 0.0627451 0.027451 0 ][ 0.552941 0.0627451 0.027451 0 ] [ 0.552941 0.0666667 0.027451 0 ][ 0.556863 0.0627451 0.027451 0 ] [ 0.560784 0.0627451 0.027451 0 ][ 0.564706 0.0666667 0.0313726 0 ] [ 0.564706 0.0666667 0.0313726 0 ][ 0.568627 0.0666667 0.0313726 0 ] [ 0.572549 0.0666667 0.0313726 0 ][ 0.576471 0.0666667 0.0313726 0 ] [ 0.576471 0.0666667 0.0313726 0 ][ 0.584314 0.0705882 0.0352941 0 ] [ 0.588235 0.0666667 0.0352941 0 ][ 0.592157 0.0666667 0.0352941 0 ] [ 0.592157 0.0705882 0.0352941 0 ][ 0.596078 0.0705882 0.0352941 0 ] [ 0.6 0.0705882 0.0352941 0 ][ 0.603922 0.0705882 0.0352941 0 ] [ 0.603922 0.0705882 0.0352941 0 ][ 0.611765 0.0705882 0.0392157 0 ] [ 0.615686 0.0745098 0.0392157 0 ][ 0.619608 0.0705882 0.0392157 0 ] [ 0.619608 0.0745098 0.0392157 0.00392157 ][ 0.623529 0.0745098 0.0392157 0.00392157 ] [ 0.627451 0.0745098 0.0392157 0.00392157 ][ 0.631373 0.0745098 0.0431373 0.00392157 ] [ 0.631373 0.0745098 0.0431373 0.00392157 ][ 0.635294 0.0745098 0.0431373 0.00392157 ] [ 0.639216 0.0784314 0.0431373 0.00392157 ][ 0.647059 0.0745098 0.0431373 0.00392157 ] [ 0.643137 0.0745098 0.0431373 0.00392157 ][ 0.647059 0.0784314 0.0431373 0.00392157 ] [ 0.654902 0.0784314 0.0431373 0.00392157 ][ 0.658824 0.0745098 0.0431373 0.00392157 ] [ 0.658824 0.0784314 0.0431373 0.00392157 ][ 0.662745 0.0784314 0.0470588 0.00392157 ] [ 0.666667 0.0784314 0.0470588 0.00392157 ][ 0.670588 0.0784314 0.0470588 0.00392157 ] [ 0.670588 0.0784314 0.0470588 0.00392157 ][ 0.67451 0.0784314 0.0470588 0.00392157 ] [ 0.678431 0.0823529 0.0470588 0.00392157 ][ 0.682353 0.0784314 0.0470588 0.00392157 ] [ 0.682353 0.0823529 0.0470588 0.00392157 ][ 0.686275 0.0823529 0.0470588 0.00392157 ] [ 0.694118 0.0823529 0.0470588 0.00392157 ][ 0.698039 0.0823529 0.0509804 0.00392157 ] [ 0.698039 0.0823529 0.0509804 0.00392157 ][ 0.701961 0.0823529 0.0509804 0.00392157 ] [ 0.705882 0.0862745 0.0470588 0.00392157 ][ 0.709804 0.0823529 0.0470588 0.00392157 ] [ 0.709804 0.0823529 0.0509804 0.00392157 ][ 0.713726 0.0862745 0.0509804 0.00392157 ] [ 0.717647 0.0862745 0.0509804 0.00392157 ][ 0.721569 0.0823529 0.0509804 0.00392157 ] [ 0.721569 0.0901961 0.0470588 0.00392157 ][ 0.72549 0.0862745 0.0509804 0.00392157 ] [ 0.729412 0.0862745 0.0509804 0.00392157 ][ 0.733333 0.0862745 0.0509804 0.00392157 ] [ 0.733333 0.0862745 0.0509804 0.00392157 ][ 0.737255 0.0862745 0.0509804 0.00392157 ] [ 0.741176 0.0901961 0.0509804 0.00392157 ][ 0.745098 0.0862745 0.0509804 0.00392157 ] [ 0.745098 0.0901961 0.0470588 0.00392157 ][ 0.74902 0.0901961 0.0470588 0.00392157 ] [ 0.752941 0.0901961 0.0470588 0.00392157 ][ 0.756863 0.0901961 0.0509804 0.00392157 ] [ 0.756863 0.0901961 0.0509804 0.00392157 ][ 0.760784 0.0901961 0.0509804 0.00392157 ] [ 0.764706 0.0941176 0.0470588 0.00392157 ][ 0.768627 0.0901961 0.0470588 0.00392157 ] [ 0.768627 0.0901961 0.0509804 0.00392157 ][ 0.772549 0.0941176 0.0470588 0.00392157 ] [ 0.776471 0.0941176 0.0470588 0.00392157 ]] >>add_csd/0 get_csdsepcs1 sepf80.2305 57.1074 mo83.9834 57.9717 86.2783 59.0332 86.2783 59.9487 cv86.2783 61.8833 76.0576 63.4507 63.4492 63.4507 cv50.8408 63.4507 40.6201 61.8833 40.6201 59.9487 cv40.6201 59.083 42.6743 58.0874 46.0703 57.251 cv38.5581 58.1533 33.6719 59.6133 33.6719 61.2612 cv33.6719 64.0034 47.1533 67.2427 63.7793 67.2427 cv80.4053 67.2427 93.8867 64.0034 93.8867 61.2612 cv93.8867 59.5229 88.4502 57.9937 80.2305 57.1074 cv/0 get_csdsepcs1 sepf9.78613 28.9331 mo5.14258 26.2896 0.856445 23.2178 0.856445 16.7881 cv0.856445 10.5728 6.71484 5.71484 13.001 5.71484 cv16.9297 5.71484 20.1455 7.14404 22.6455 10.002 cv19.0732 13.9307 ln17.6436 12.145 15.1445 10.7163 12.6436 10.7163 cv9.28613 10.7163 6.21582 13.2158 6.21582 16.7881 cv6.21582 20.0029 8.71387 21.8594 12.2881 23.9321 cv14.7881 25.3604 ln19.0732 27.8604 23.7168 31.0757 23.7168 37.5054 cv23.7168 44.2915 18.3594 50.0073 11.2158 50.0073 cv6.21582 50.0073 2.28613 47.5054 0 44.2915 cv4.14355 40.0054 ln5.92871 43.2202 8.92969 44.8638 11.9297 44.8638 cv15.502 44.8638 18.3594 41.7925 18.3594 37.8623 cv18.3594 34.4326 16.2158 32.6475 12.2881 30.3608 cv9.78613 28.9331 ln0 0 0 1 cmykf51.2686 35.1479 mo51.2686 39.8618 52.9834 43.1479 56.6982 46.0063 cv52.9834 49.7202 ln51.6963 48.9351 49.624 46.4351 48.4111 44.3628 cv46.6963 47.6489 42.624 50.0073 38.7666 50.0073 cv32.8369 50.0073 28.3369 45.7925 28.3369 39.2905 cv28.3369 32.2183 33.1943 28.5757 40.9092 28.5757 cv46.2666 28.5757 ln46.2666 24.0747 43.9814 20.5737 39.4795 20.5737 cv37.7666 20.5737 36.5518 21.2168 35.3379 22.2891 cv32.3369 18.4312 ln34.5518 16.5737 36.5518 15.7168 39.4795 15.7168 cv46.9102 15.7168 51.2686 21.5029 51.2686 28.2178 cv51.2686 35.1479 lncp46.2666 35.1479 mo46.2666 33.0752 ln40.9092 33.0752 ln35.5518 33.0752 33.4805 35.5059 33.4805 39.2905 cv33.4805 42.5776 36.124 45.1479 38.7666 45.1479 cv43.9102 45.1479 46.626 39.2192 46.626 39.2192 cv46.626 39.2192 46.2666 36.7197 46.2666 35.1479 cvf62.4053 60.0103 mo60.9482 0 ln65.9482 0 ln65.9482 31.1465 ln81.3789 15.7168 ln84.8066 19.146 ln72.0918 31.8613 ln86.665 46.4351 ln83.0928 50.0073 ln65.9482 32.8618 ln65.04 60.0054 lnf112.073 35.1479 mo112.073 39.8618 113.788 43.1479 117.503 46.0063 cv113.788 49.7202 ln112.501 48.9351 110.43 46.4351 109.216 44.3628 cv107.502 47.6489 103.429 50.0073 99.5713 50.0073 cv93.6436 50.0073 89.1416 45.7925 89.1416 39.2905 cv89.1416 32.2183 93.999 28.5757 101.715 28.5757 cv107.073 28.5757 ln107.073 24.0747 104.786 20.5737 100.286 20.5737 cv98.5713 20.5737 97.3564 21.2168 96.1416 22.2891 cv93.1416 18.4312 ln95.3564 16.5737 97.3564 15.7168 100.286 15.7168 cv107.715 15.7168 112.073 21.5029 112.073 28.2178 cv112.073 35.1479 lncp107.073 35.1479 mo107.073 33.0752 ln101.715 33.0752 ln96.3564 33.0752 94.2852 35.5059 94.2852 39.2905 cv94.2852 42.5776 96.9277 45.1479 99.5713 45.1479 cv104.714 45.1479 107.43 39.2192 107.43 39.2192 cv107.43 39.2192 107.073 36.7197 107.073 35.1479 cvf128.754 7.00098 mo128.754 8.85791 127.253 10.3589 125.396 10.3589 cv123.538 10.3589 122.038 8.85791 122.038 7.00098 cv122.038 5.14404 123.538 3.64404 125.396 3.64404 cv127.253 3.64404 128.754 5.14404 128.754 7.00098 cvcp127.968 49.2925 mo122.823 49.2925 ln122.823 16.4321 ln127.968 16.4321 ln127.968 49.2925 lnfgrestoregrestoreAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Core/page_trailer get exec%%TrailerAdobe_AGM_Core/doc_trailer get exec%%EOFgsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%%For: (Jeff  Chen) (SFmedia)%%Title: (sakai_color_print.eps)%%CreationDate: 2/19/04 1:32 PM%AI9_DataStream%Gatm=CNJ:>(&\=6&,;k:/$18[9dlVb3DSDOelK(TG<?`P^!"LO;WJ=SCKpW-4Vo4IX<+g>l0,D5_8XBA*e<$uK9L3)Y1E"58b_>6%#pktIMFf=cd5!dCptPY>hVOO>V/Vq-F(HYQ1s_(X@YV[rFdVm8>OHCoG$+CmZJKIp];Fo'a6]V$QN'O206`m[Z`[A3UYGI'4D#PV%f[^.O[d$'+=&&XmDT()3Q^[GLYQAnGE_"(6IX+jtf+9_LP7NPaCms1'kc:EC7s,?c/[lh6cO>i<nq#3Ua,0p!%4*hFU]JW@?EBXm%7G$Er"4Og$A?bCe(3U]SIi[I6mBYEIl3/A/YIrOm)R*<BqQ_.HkXQV;&uJT0hVCjkI'S"jqT\j%T9sRD48nj>+XBijrTfe<lBi<s%[792OE/N,"ZMpV\mSO.%ZCo&6E;&Ak7=DlCTj)a.D^:9$#PTk:9bhUa%\$%[P46-`^"P>2n=)iq>RlP5a7XgI^t)::I\H6i/aIo/%)45lEEr(c)GK0e8Qt4>mZWK>f,t*hO"]H>7@\!8`r$Q#!jm#QgZY?G5p2r"rPA;M9VZ614PXGOs.7Xc5JhpWR0GI`brj8gm+1#&!%Enq5]p1&p;@_E1=oW0,ef70Gs$l@,K&^ZGA;tk4bomfm7b&UqEX):or^.cPW0:L&8:#_Q?*sCG"rH18"T/A\;r%T^[ETm)`k,c.r%qsC?,?(Gp!p.b:^[oO1uf9/d=3R9SGQH<B8LINe=_5o&P#jDF':r1Du)mtk^dPNOaOd6/#rOcKEYM3QEQ`hf_[AZ!+Io.kSj/7pS%LG2?oe;^6,i../DW_`kZ\^32upZkgq)UMM&rd!,e1AQ"??gnZd)MYg4NV6;_3pgf595)=t'@_AeAn\dA0K*;8&M1EG"R#^]ea!^n%81AAr?B6=uQ/YT3IXQeU,?+`^D$*BiqPERC\,M+&B2@BF*VJ/14*k2geEjBldH):s=\g4F44!W4k?S8L,2;RNGL*SUjq]n*a2Pdo%I:eAM@dedsfF$iSMp1KhAOhXcVQq:"Fp'&Zl-4p3dF`A`]Vlb0W:mYN50PA0V%th#S)$FJbNs"d<obI[)9mT4n*ulSm+n#prW#nN%:1jAN1]Ne@S\``25PN%T"o_1iPZNcTLS:@;DRXoErn_3^r$K>t<4RF(Nj'!8fh&s5IUmB.XuU%i!om,(6A,5u8q1sma?Hak.f*)T%:TL?q?h`+5j*LN_q?P%'FWR%LeHIUm4s1B<[6HK$o>$<'V$)oql?9S+<JT>-o5+A>!Y<%D&7^,_gW&i"W3V&VUZii%:3Z"M2+Q3S%qKo!FeElBFL9^b><qX@cY3K))kr3"qqKd8icM.mklb9OVn!*dtm-5^nE@NL](DY>JDb;>\HrDpA^`O:!j!#?GZa<pV8a:JEMriM?%[`,s"j9g'PJnt\.%IH\']\,06Mh6a9+EUI^UX8gSf^&fc;/K/alT`6H-Z6;dH$XDSWu>"2objaFj'IEP@K4t[c$Hm2B65g;P!>,l%A_4-NQ+u3,%Vus;YW'5X@GA'T;r)Aj!nk.R`,7KhG!4?]lFYLis6j#;m?;a<7_e,!Ho_gtgQ6Q:,HX;]BgEDYp*"eBAJm^CB.`oZ%5.OVP;<$e[kU@;:!+N;U*_rS<@;gFWmD<c9J(ZWlGINgB`++qLo93*L/hO]WUsceROt`$q-RFb+XciahW0IZc3aAn#Q684A97s"@%K[E8&+?\fjSN_2AEU'"\Q^K7[S<l-k#jlYFatd^'OE%+Q^_g9jK9MhJ$fM\[CUt&m6OJT4m:>W)>WKbcYL7_G`Nbdc\\LG5\hljD%+sqLL0ue5G'/6kF8QJ(gNfrp(&tW5eqT[+0#M,7t&McD6'\#]M"Qm[8#d+ot+jMQm]JnM'KtuS=f4jr*p,6u6qLA68P`QT8JL9\*%iCX4f#o+eRS5KBHF%VICFTihS.6rSf2FV#GFFq_n(p[?g#a/\G+2edZoXl2mT+JpL9"Apo@KK:dj[@U_+S0mc#-/*m+Jl(.Q++CS%W'm:V3Z!lU)Fpbq*L3H1o:.)nej,a\>h_CAU;H[lRNQ8p8p\9>*N2k$FU?Sj$ie#\0c#nJ&$V<KQ'*O-Y03am,&t-r6\Z#>UCOQ&%XV>n>V<)Ucp=&m@;8b=a)'S$Bfa%^aWtIDs0u-_P4BaAH%LGFHT[5r*#&,V?4H50H\T"2MWp^6moUr!Ob(4ZM2?p!2dI#FDYa*O"%BL2`DUPp&mD%nO&ZLhGe!^c?W[%h>ikGf)<7RA,:NJsE^I^Wp,,B9C[P-2nABtR$ci]14V29JSuRD<n(K.ort1=lka-1*)cSg'$/%1Zn(6U^6tZ*i1;JTV._0,mgkTqcU.[#L)857$H`=2Zh5pQnTp;"]p\6:+eqdE8Sg0p1CD18<m&6!i;504bAkl"aMXh.jlUMI$RZF%N'T15T3lZa\c[X8+$EBjKXVu5i"H`*+BHKc+,5kTbQQsG+,>7i`1`Ec-W7;<*:\)2onHCM['r2-2Q%3,ZqoOt[%/[G)L"q2k+9!L%Q?n1Dpu*g4!musMQM^f:JeY-m+ssP&JUL8unfprD'FFm<Kr$/>,bj?`-W(3OUj+"Oe<VeGT'3F;D>oRY:=C]qYau.,m50M&nJ5QV%.,?]jgb4N'e22#7*&bIHBtK^<MuD%j6jUDlnUMJZ3s"iqU::&r$)0T,d3O]7&<'0]e%PrXR0uS>-74C>7.C0O'6][NTJ8'5-LD`U%nHEob'&N&^-r!+H/foD.V(?A]/=^XXd\9ou7FhpIG!o*>UTcJ!bG@TTN=RucH(:f$Bd0,l:!nP)#ltjja[Bkr"'D4qVe5u>HSR^3%TRNiJ3.%6M,,qZ"3U1I"n/U-bK<)iL$)<^b0O>]8k6[4qEl&.gh[A[s=.s@u,Ef&E&b=b:^.0X%\OIm.p<o1kh582ec4/HGcc&\$%@hf9#7.#_G%bk!7,:T0.cj+MC^+tJU&mb/i-43R1=+hab(2'^/70J0?V(WhBpUQn'b#!\a-]!aZ+(tQiioi'YG9(*1E]i<tFBM#g%pHE"$rjm%]nD)W+01InbF;=R4Ai[[srfGimbWkWQ`/[hiOjZ`D1t)]/.fHe9d>(,GC`q6T&IHl+.=J'(WSBnHJNj!W4E0uWX2L=e%E'R%[6_\51*]Zle+-eEo,`mi#_Fq+q6Kk4sR.EiYW.XV2&1N:V*-]/c65"+1&?5$;h\/"@lqh:)+^N(NcRadfJ-e`2O[A9q)siM'%69YW*P),?GR]5c?)J_"2@3uS4JdFWd;KFFK,SGZ!,57"/,*<_$Uq@m0'1NCJK$i&"2gN7g.G.GX9Hje)jDr*a&g?/;".,,kP1l<q%KX0["5Z,U^Po;Y.Z$k\pq]=VQOQd]B'JLri#@N:B3UmO=]JFYaZT.fTFmuBS%"r7;*)KNN74fj\Nqn-/L*k04$-1F]%I,>ao3*A*%o-Sf2U"S9ocX!0/E*6@*qO#&fQ9+EQgPli0&N`W>8Hb\LPKe.j_PXm(WTPhHp%@bgkhVa.?K+[dXdcoJY.)rZRT44Z%Fn9n0LB]T%[R8ZuN4pJ]"B-Z;LVI@^)X@<6h*M.SXp8!WWL)<:0+o@n](=b?j+?5obK%Yemnk/>3]Qp!r'g<d9mB.l~>%AI9_PrivateDataEnd